using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace ImperativeToObjectOriented
{
    public class Account
    {
        public string Name;
        public decimal Balance;

        public void Withdraw(decimal amount)
        {
            if (Balance >= amount)
            {
                Balance -= amount;
            }
            else
            {
                throw new ArgumentException("Balance too low to withdraw");
            }
        }

        public void Deposit(decimal amount)
        {
            Balance += amount;
        }

        // Transfer doesn't use Withdraw or Deposit for some reason, use of method gives no results.
        public void Transfer(decimal amount) 
        {
            if (Balance >= amount)
            {
                Withdraw(amount);
                Deposit(amount);
            }
            else
            {
                throw new ArgumentException("Balance too low to transfer");
            }
        }
    }

    public class Share
    {
        public string Company;
        public int Amount;
        public decimal Price;

        public void BuyShare(int amount, Account account)
        {
            decimal totalPrice = Price * amount;
            if (account.Balance >= totalPrice)
            {
                account.Withdraw(totalPrice);
                Amount += amount;
            }
            else
            {
                throw new ArgumentException("Balance too low to buy shares");
            }
        }

        public void SellShare(int amount, Account account)
        {
            if (amount <= Amount)
            {
                decimal totalPrice = Price * amount;
                account.Deposit(totalPrice);
                Amount -= amount;
            }
            else
            {
                throw new ArgumentException("Number of shares too low to sell");
            }
        }
    }

    public class Bank
    {
        // These two variables contain the user's accounts and shares.
        // They are static and so will be available automatically to all methods in this class.
        public static Account[] accounts =
        {
            new Account { Name = "Spar", Balance = 90000 },
            new Account { Name = "Kort", Balance = 5000 },
            new Account { Name = "Resor", Balance = 22000 }
        };

        public static Share[] shares =
        {
            new Share { Company = "Ericsson", Price = 72, Amount = 20 },
            new Share { Company = "H&M", Price = 129, Amount = 50 },
            new Share { Company = "AstraZeneca", Price = 713, Amount = 5 }
        };

        public static void Main()
        {
            CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;

            bool done = false;
            while (!done)
            {
                ShowUserInfo();
                Console.WriteLine();

                int option = ShowMenu("What do you want to do?", new[]
                {
                    "Deposit",
                    "Withdraw",
                    "Transfer",
                    "Buy shares",
                    "Sell shares",
                    "Exit"
                });
                Console.Clear();

                // Call one of the "Page" methods based on which option the user picks.
                // If one of the methods throws an exception, just show the error message and keep going.
                try
                {
                    if (option == 0)
                    {
                        DepositPage();
                    }
                    else if (option == 1)
                    {
                        WithdrawPage();
                    }
                    else if (option == 2)
                    {
                        TransferPage();
                    }
                    else if (option == 3)
                    {
                        BuySharePage();
                    }
                    else if (option == 4)
                    {
                        SellSharePage();
                    }
                    else if (option == 5)
                    {
                        done = true;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("There was an error: " + e.Message);
                }

                Console.WriteLine();
            }
        }

        public static void ShowUserInfo()
        {
            Console.WriteLine("Your accounts:");
            foreach (Account account in accounts)
            {
                Console.WriteLine("- " + account.Name + " (" + account.Balance + " kr)");
            }
            Console.WriteLine();

            Console.WriteLine("Your shares:");
            foreach (Share share in shares)
            {
                Console.WriteLine("- " + share.Company + " (" + share.Amount + " at " + share.Price + " kr)");
            }
        }

        public static void DepositPage()
        {
            int accountIndex = ShowAccountMenu("Select account to deposit into:");
            Account account = accounts[accountIndex];
            Console.WriteLine();

            Console.Write("Select amount to deposit: ");
            decimal amount = decimal.Parse(Console.ReadLine());

            Console.Clear();
            account.Deposit(amount);
            Console.WriteLine(amount + " kr deposited into " + account.Name);
        }

        public static void WithdrawPage()
        {
            int accountIndex = ShowAccountMenu("Select account to withdraw from:");
            Account account = accounts[accountIndex];

            Console.Write("Select amount: ");
            decimal amount = decimal.Parse(Console.ReadLine());

            Console.Clear();
            account.Withdraw(amount);
            Console.WriteLine(amount + " kr withdrawn from " + account.Name);
        }

        public static void TransferPage()
        {
            int fromIndex = ShowAccountMenu("Select account to transfer from:");
            Account fromAccount = accounts[fromIndex];

            int toIndex = ShowAccountMenu("Select account to transfer to:");
            Account toAccount = accounts[toIndex];

            Console.Write("Select amount: ");
            decimal amount = decimal.Parse(Console.ReadLine());

            Console.Clear();
            fromAccount.Transfer(amount);
            Console.WriteLine(amount + " kr transfered from " + fromAccount.Name + " to " + toAccount.Name);
        }

        public static void BuySharePage()
        {
            int shareIndex = ShowShareMenu("Select share to buy:");
            Share share = shares[shareIndex];

            Console.Write("Select amount to buy: ");
            int shareAmount = int.Parse(Console.ReadLine());

            int accountIndex = ShowAccountMenu("Select account to buy with:");
            Account account = accounts[accountIndex];

            Console.Clear();
            share.BuyShare(shareAmount, account);
            Console.WriteLine("Bought " + shareAmount + " shares of " + share.Company + " with account " + account.Name);
        }

        public static void SellSharePage()
        {
            int shareIndex = ShowShareMenu("Select share to sell:");
            Share share = shares[shareIndex];

            Console.Write("Select amount to sell: ");
            int shareAmount = int.Parse(Console.ReadLine());

            int accountIndex = ShowAccountMenu("Select account to deposit into:");
            Account account = accounts[accountIndex];

            Console.Clear();
            share.SellShare(shareAmount, account);
            Console.WriteLine("Sold " + shareAmount + " shares of " + share.Company + " with account " + account.Name);
        }

        public static int ShowAccountMenu(string prompt)
        {
            List<string> options = new List<string>();
            foreach (Account account in accounts)
            {
                options.Add(account.Name + " (" + account.Balance + " kr)");
            }

            return ShowMenu(prompt, options.ToArray());
        }

        public static int ShowShareMenu(string prompt)
        {
            List<string> options = new List<string>();
            foreach (Share share in shares)
            {
                options.Add(share.Company + " (" + share.Amount + " at " + share.Price + " kr)");
            }

            return ShowMenu(prompt, options.ToArray());
        }



        public static int ShowMenu(string prompt, string[] options)
        {
            if (options == null || options.Length == 0)
            {
                throw new ArgumentException("Cannot show a menu for an empty array of options.");
            }

            Console.WriteLine(prompt);

            int selected = 0;

            // Hide the cursor that will blink after calling ReadKey.
            Console.CursorVisible = false;

            ConsoleKey? key = null;
            while (key != ConsoleKey.Enter)
            {
                // If this is not the first iteration, move the cursor to the first line of the menu.
                if (key != null)
                {
                    Console.CursorLeft = 0;
                    Console.CursorTop = Console.CursorTop - options.Length;
                }

                // Print all the options, highlighting the selected one.
                for (int i = 0; i < options.Length; i++)
                {
                    var option = options[i];
                    if (i == selected)
                    {
                        Console.BackgroundColor = ConsoleColor.Blue;
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    Console.WriteLine("- " + option);
                    Console.ResetColor();
                }

                // Read another key and adjust the selected value before looping to repeat all of this.
                key = Console.ReadKey().Key;
                if (key == ConsoleKey.DownArrow)
                {
                    selected = Math.Min(selected + 1, options.Length - 1);
                }
                else if (key == ConsoleKey.UpArrow)
                {
                    selected = Math.Max(selected - 1, 0);
                }
            }

            // Reset the cursor and return the selected option.
            Console.CursorVisible = true;
            return selected;
        }
    }

    [TestClass]
    public class BankTest
    {
        [TestMethod]
        public void DepositTest()
        {
            Account account = new Account { Name = "Kort", Balance = 500 };
            account.Deposit(200);
            Assert.AreEqual(700, account.Balance);
        }

        [TestMethod]
        public void WithdrawTest()
        {
            Account account = new Account { Name = "Kort", Balance = 500 };
            account.Withdraw(200);
            Assert.AreEqual(300, account.Balance);
        }

        [TestMethod]
        public void TransferTest()
        {
            Account fromAccount = new Account { Name = "Spar", Balance = 5000 };
            Account toAccount = new Account { Name = "Kort", Balance = 1000 };
            fromAccount.Transfer(200);
            Assert.AreEqual(4800, fromAccount.Balance);
            Assert.AreEqual(1200, toAccount.Balance);
        }
    }
}
